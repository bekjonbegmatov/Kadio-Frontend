import React, { useState, useEffect } from 'react';
import { getUserFriends } from '../../api/friends';
import { getCurrentUser } from '../../api/auth';
import { getChatRoom } from '../../api/chat.js';
import { useNavigate } from 'react-router-dom';
import { BASE_URL } from '../../api/config';
import DefaultAvatar from '../../components/DefaultAvatar/DefaultAvatar';
import FriendRecommendations from '../../components/FriendRecommendations/FriendRecommendations';
import FriendRequests from '../../components/FriendRequests/FriendRequests';
import './FrendsPage.css';

const FrendsPage = () => {
  const [friends, setFriends] = useState([]);
  const [friendRequests, setFriendRequests] = useState([]);
  const [users, setUsers] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeSection, setActiveSection] = useState('friends');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await getCurrentUser();
        if (userResult.success) {
          setCurrentUser(userResult.data);
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–∑–µ–π –∏ –∑–∞–ø—Ä–æ—Å—ã
        const result = await getUserFriends();
        console.log('API Response:', result); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        if (result.success) {
          console.log('Friends data:', result.data);
          console.log('Current user ID:', userResult.data?.id);
          
          // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å from_user, to_user, status, created_at
          const friendsData = result.data || [];
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è
          const acceptedFriends = friendsData.filter(
            friendship => friendship.status === 'accepted'
          );
          
          console.log('Accepted friends:', acceptedFriends);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π (–±–µ—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º)
          const friends = acceptedFriends.map(friendship => {
            const currentUserId = userResult.data?.id;
            if (friendship.from_user.id === currentUserId) {
              return friendship.to_user;
            } else {
              return friendship.from_user;
            }
          });
          
          console.log('Final friends data:', friends);
          
          setFriends(friends);
          setFriendRequests(friendsData); // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ FriendRequests
          setUsers([]); // –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        } else {
          setError(result.error);
        }
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const renderFriendRow = (friend) => {
    const formatDate = (dateString) => {
      if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU');
    };

    return (
      <tr key={friend.id} className="friend-row">
        <td className="friend-avatar">
          {friend.avatar_url && friend.avatar_url.trim() && friend.avatar_url.trim() !== '' ? (
            <img 
              src={`${BASE_URL}${friend.avatar_url}`} 
              alt={friend.full_name || friend.username}
              className="avatar-image"
            />
          ) : (
            <DefaultAvatar 
              email={friend.email || friend.username}
              name={friend.full_name || friend.username}
              size={40}
            />
          )}
        </td>
        <td className="friend-name">
          <div className="name-info">
            <span className="full-name">{friend.full_name || friend.username}</span>
            <span className="username">@{friend.username}</span>
          </div>
        </td>
        <td className="friend-email">{friend.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
        <td className="friend-birth-date">{formatDate(friend.date_of_birth)}</td>
        <td className="friend-actions">
          <button 
            className="message-btn"
            onClick={() => handleStartChat(friend.id)}
          >
            –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </button>
        </td>
      </tr>
    );
  };

  const handleStartChat = async (friendId) => {
    try {
      const chatRoom = await getChatRoom(friendId);
      navigate(`/chats/${chatRoom.id}`);
    } catch (error) {
      console.error('Error creating chat:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞');
    }
  };

  const refreshData = async () => {
    setLoading(true);
    try {
      const result = await getUserFriends();
      
      if (result.success) {
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å from_user, to_user, status, created_at
        const friendsData = result.data || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è
        const acceptedFriends = friendsData.filter(
          friendship => friendship.status === 'accepted'
        );
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π (–±–µ—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º)
        const friends = acceptedFriends.map(friendship => {
          const currentUserId = currentUser?.id;
          if (friendship.from_user.id === currentUserId) {
            return friendship.to_user;
          } else {
            return friendship.from_user;
          }
        });
        
        setFriends(friends);
        setFriendRequests(friendsData); // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ FriendRequests
        setUsers([]); // –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="friends-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="friends-page">
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
          <p>{error}</p>
          <button className="retry-button" onClick={refreshData}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  const pendingRequests = friendRequests.filter(req => req.status === 'pending');
  const hasRequests = pendingRequests.length > 0;

  return (
    <div className="friends-page">
      <div className="friends-header">
        <h1>–î—Ä—É–∑—å—è</h1>
        <div className="friends-navigation">
          <button 
            className={`nav-btn ${activeSection === 'friends' ? 'active' : ''}`}
            onClick={() => setActiveSection('friends')}
          >
            –ú–æ–∏ –¥—Ä—É–∑—å—è ({friends.length})
          </button>
          <button 
            className={`nav-btn ${activeSection === 'requests' ? 'active' : ''}`}
            onClick={() => setActiveSection('requests')}
          >
            –ó–∞–ø—Ä–æ—Å—ã {hasRequests && <span className="badge">{pendingRequests.length}</span>}
          </button>
          <button 
            className={`nav-btn ${activeSection === 'recommendations' ? 'active' : ''}`}
            onClick={() => setActiveSection('recommendations')}
          >
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </button>
        </div>
      </div>

      <div className="friends-content">
        {activeSection === 'friends' && (
          <div className="friends-section">
            {friends.length > 0 ? (
              <>
                <div className="section-header">
                  <h2>–í–∞—à–∏ –¥—Ä—É–∑—å—è</h2>
                  <p>–£ –≤–∞—Å {friends.length} {friends.length === 1 ? '–¥—Ä—É–≥' : friends.length < 5 ? '–¥—Ä—É–≥–∞' : '–¥—Ä—É–∑–µ–π'}</p>
                </div>
                <div className="friends-table-container">
                  <table className="friends-table">
                    <thead>
                      <tr>
                        <th>–ê–≤–∞—Ç–∞—Ä</th>
                        <th>–ò–º—è</th>
                        <th>Email</th>
                        <th>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                      </tr>
                    </thead>
                    <tbody>
                      {friends.map(renderFriendRow)}
                    </tbody>
                  </table>
                </div>
              </>
            ) : (
              <div className="empty-friends">
                <div className="empty-icon">üë•</div>
                <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</h3>
                <p>
                  –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–∑–µ–π! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" 
                  –∏–ª–∏ "–ó–∞–ø—Ä–æ—Å—ã", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π.
                </p>
                <div className="empty-actions">
                  <button 
                    className="primary-btn"
                    onClick={() => setActiveSection('recommendations')}
                  >
                    –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π
                  </button>
                  {hasRequests && (
                    <button 
                      className="secondary-btn"
                      onClick={() => setActiveSection('requests')}
                    >
                      –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã
                    </button>
                  )}
                </div>
              </div>
            )}
          </div>
        )}

        {activeSection === 'requests' && (
          <div className="requests-section">
            <FriendRequests 
              currentUserId={currentUser?.id}
              onRequestProcessed={refreshData}
            />
          </div>
        )}

        {activeSection === 'recommendations' && (
          <div className="recommendations-section">
            <FriendRecommendations onRequestSent={refreshData} />
          </div>
        )}
      </div>
    </div>
  );
};

export default FrendsPage;